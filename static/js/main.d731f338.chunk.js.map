{"version":3,"sources":["components/CardDisplay.tsx","components/Generator.tsx","components/QRScanner.tsx","pages/Home.tsx","pages/Stream.tsx","App.tsx","index.tsx"],"names":["baseUrl","CardDisplay","cardId","React","useState","cardData","setCardData","url","useEffect","console","log","fetch","then","response","json","data","style","width","height","imagesrc","alt","name","src","Generator","label","setLabel","handleInputChange","useCallback","evt","target","value","saveSVG","svg","document","getElementById","innerHTML","blob","Blob","toString","element","createElement","download","href","window","URL","createObjectURL","click","remove","direction","align","onChange","placeholder","title","icon","SaveOutlined","onClick","id","size","QRScanner","onScan","onError","visible","handleScan","handleError","err","delay","Title","Typography","P","Paragraph","L","Link","HomePage","setData","handleScanError","error","className","wrap","to","StreamPage","setCardId","App","type","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d731f338.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nexport type CardDisplayProps = {\n  cardId: string;\n};\n\nconst baseUrl = \"https://arkhamdb.com\";\n\nexport const CardDisplay: React.FC<CardDisplayProps> = ({ cardId }) => {\n  const [cardData, setCardData] = React.useState<any>({});\n  const url = `${baseUrl}/api/public/card/${cardId}`;\n\n  useEffect(() => {\n    if (!cardId) {\n      return;\n    }\n    console.log(\"fetch\");\n    fetch(url)\n      .then((response) => response.json())\n      .then(setCardData)\n      .then((data) => console.log(data));\n  }, [cardId, url]);\n\n  return (\n    <div style={{ width: \"420px\", height: \"420px\" }}>\n      {cardData && cardData.imagesrc && (\n        <img alt={cardData.name} src={`${baseUrl}${cardData.imagesrc}`} />\n      )}\n    </div>\n  );\n};\n","import {\n  Button,\n  Input,\n  Space,\n  Tooltip\n} from \"antd\";\nimport React, {\n  useCallback,\n  useState\n} from \"react\";\nimport QRCode from \"react-qr-code\";\nimport { SaveOutlined } from \"@ant-design/icons\";\n\nexport const Generator: React.FC = () => {\n  const [label, setLabel] = useState<string>(\"\");\n  const handleInputChange = useCallback((evt) => {\n    setLabel(evt.target.value);\n  }, [setLabel]);\n\n  const saveSVG = useCallback(() => {\n    const svg = document.getElementById('qr-code')?.innerHTML;\n    if (!svg) {\n      return;\n    }\n    const blob = new Blob([svg.toString()]);\n    const element = document.createElement(\"a\");\n    element.download = \"w3c.png\";\n    element.href = window.URL.createObjectURL(blob);\n    element.click();\n    element.remove();\n  }, []);\n\n  return (\n    <Space direction=\"vertical\" align=\"center\" style={{ width: \"100%\" }}>\n      <Space>\n        <Input onChange={handleInputChange} placeholder=\"Card ID\" />\n        <Tooltip title=\"Download SVG\">\n          <Button icon={<SaveOutlined />} onClick={saveSVG} />\n        </Tooltip>\n      </Space>\n      <QRCode id=\"qr-code\" value={label} size={128} />\n    </Space>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport QrReader from \"react-qr-reader\";\n\nexport type QRScannerProps = {\n  onScan?: (data: string) => void;\n  onError?: (error: string) => void;\n  visible?: boolean;\n};\n\nexport const QRScanner: React.FC<QRScannerProps> = ({\n  onScan,\n  onError,\n  visible,\n}) => {\n  const handleScan = useCallback(\n    (data) => {\n      if (onScan) {\n        onScan(data);\n      }\n    },\n    [onScan]\n  );\n\n  const handleError = useCallback(\n    (err) => {\n      if (err && onError) {\n        onError(err);\n      }\n    },\n    [onError]\n  );\n\n  const width = visible ?? true ? \"100%\" : 0;\n\n  return (\n    <QrReader\n      delay={300}\n      onError={handleError}\n      onScan={handleScan}\n      style={{ width }}\n    />\n  );\n};\n","import {\n  Card,\n  Space,\n  Typography\n} from \"antd\";\nimport React, { useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  CardDisplay,\n  Generator,\n  QRScanner\n} from \"../components\";\n\nconst { Title, Paragraph: P, Link: L } = Typography;\n\nexport const HomePage: React.FC = () => {\n  const [data, setData] = React.useState(\"\");\n  const handleScan = useCallback((data: string) => {\n    setData(data);\n  }, []);\n  const handleScanError = useCallback((err: string) => {\n    console.error(err);\n    setData(err);\n  }, []);\n\n  return (\n    <div className={\"home-page\"}>\n      <Title>Arkham Horror Card Interface</Title>\n      <Space align=\"start\" wrap>\n        <Card title=\"Card\">\n          <CardDisplay cardId={data} />\n        </Card>\n\n        <Card title=\"QR Scanner\" style={{ width: 300 }}>\n          <QRScanner onScan={handleScan} onError={handleScanError} />\n          <pre>{data}</pre>\n        </Card>\n        <Card title=\"QR Generator\" style={{ width: 300 }}>\n          <Generator />\n        </Card>\n        <Card title=\"Info\">\n          <P>\n            This is a tool designed for use in streaming{\" \"}\n            <L href=\"https://www.fantasyflightgames.com/en/products/arkham-horror-the-card-game/\">\n              Arkham Horror: The Card Game\n            </L>\n            . It allows you to create QR codes for you cards (corresponding to\n            the card ID), and then scan the code to get a digital image.\n          </P>\n          <P>\n            Use this page for testing your setup, camera alignment, and for\n            generating QR codes. Use <Link to=\"/stream\">/stream</Link> as your\n            OBS browser source. The card display area is <b>400px</b> by{\" \"}\n            <b>400px</b>.\n          </P>\n        </Card>\n      </Space>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useState\n} from \"react\";\nimport {\n  CardDisplay,\n  QRScanner\n} from \"../components\";\n\nexport const StreamPage: React.FC = () => {\n  const [cardId, setCardId] = useState<string>(\"\");\n  const handleScan = useCallback(\n    (data: string) => {\n      setCardId(data);\n    },\n    [setCardId]\n  );\n\n  return (\n    <>\n      <CardDisplay cardId={cardId} />\n      <QRScanner onScan={handleScan} visible={false} />\n    </>\n  );\n};\n","import \"./App.less\";\nimport { Button } from \"antd\";\nimport React from \"react\";\nimport {\n  Link,\n  Route,\n  Routes\n} from \"react-router-dom\";\nimport {\n  HomePage,\n  StreamPage\n} from \"./pages\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"nav-links\">\n        <Button type=\"link\">\n          <Link to=\"/\">Home</Link>\n        </Button>\n        |\n        <Button type=\"link\">\n          <Link to=\"/stream\">Stream</Link>\n        </Button>\n      </div>\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/stream\" element={<StreamPage />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}